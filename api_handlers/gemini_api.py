import os
import streamlit as st
from typing import Optional
import google.generativeai as genai

class GeminiHandler:
    """Handler for Google Gemini API integration"""
    
    def __init__(self):
        self.api_key = self._get_api_key()
        self.model = None
        if self.api_key:
            try:
                import google.generativeai as genai
                genai.configure(api_key=self.api_key)
                # Use the correct model name based on the available models
                self.model = genai.GenerativeModel("models/gemini-1.5-flash")
            except ImportError:
                st.error("Google Generative AI library not installed. Run: pip install google-generativeai")
    
    def _get_api_key(self) -> Optional[str]:
        """Get Gemini API key from environment or Streamlit secrets"""
        # Try to get from environment variable
        api_key = os.getenv('GEMINI_API_KEY')
        
        # If not in environment, try Streamlit secrets
        if not api_key:
            try:
                api_key = st.secrets["gemini"]["api_key"]
            except:
                pass
        
        return api_key
    
    def get_review(self, prompt: str) -> str:
        """Get code review from Google Gemini"""
        if not self.api_key:
            return self._get_mock_response("Gemini API key not configured. Please set GEMINI_API_KEY environment variable or configure in Streamlit secrets.")
        
        if not self.model:
            return self._get_mock_response("Gemini model not initialized. Please check your API key and install google-generativeai library.")
        
        try:
            response = self.model.generate_content(prompt)
            return response.text
            
        except Exception as e:
            return self._get_mock_response(f"❌ Gemini API error: {str(e)}")
    
    def _get_mock_response(self, error_message: str) -> str:
        """Return a mock response when API is not available"""
        return f"""
# Code Review Report (Gemini)

{error_message}

## Mock Review Example

Since the API is not configured, here's an example of what a Gemini code review might look like:

### ✅ Code Quality Assessment
- **Structure**: The code follows a logical flow
- **Readability**: Variable names are clear and descriptive
- **Modularity**: Functions are appropriately sized

### 🔧 Technical Analysis
- **Performance**: Consider optimizing loops where possible
- **Memory Usage**: Efficient use of data structures
- **Error Handling**: Could benefit from more robust exception handling

### 📋 Specific Recommendations

#### 1. Code Style Improvements
- Add type hints to function parameters
- Use f-strings instead of .format() for better readability
- Consider using dataclasses for complex data structures




#### 3. Documentation
- Add docstrings to all functions
- Include examples in docstrings
- Document complex algorithms

### 🎯 Implementation Priority
1. **High**: Add comprehensive error handling
2. **Medium**: Implement type hints
3. **Low**: Add performance optimizations

### 📊 Code Metrics
- **Complexity**: Moderate
- **Maintainability**: Good
- **Testability**: Needs improvement

This review was generated by Google Gemini AI model.
        """